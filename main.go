package main

import "fmt"

/**
 * Бросайте фишки в столбики.
 * Соедините по крайней мере 4 своих фишки в любом направлении, чтобы выиграть.
 **/

// Страница с игрой
// https://www.codingame.com/ide/puzzle/connect-4

/*
Игра проходит на доске размером 7х9 (7 рядов и 9 столбцов).
Каждый игрок по очереди бросает фишки в одну из колонок.

Игра работает следующим образом:

    Игрок получает полное состояние доски в качестве входных данных.
    Игрок выбирает столбец, в который будет помещена его фишка (выводит единственное целое число в диапазоне [0,8])
    Фишка падает в этот столбец доски и оседает в самой нижней пустой ячейке.

Примечание:
Есть 9 столбцов, индексы равны [0,8].
0 => крайний левый столбец.
8 => крайний правый столбец.

Ход КРАЖИ для второго игрока: (необязательно)

Второй игрок может сыграть "STEAL" для своего первого действия.
Это действие не помещает новую фишку на доску,
но преобразует единственную существующую фишку противника в собственную фишку второго игрока.
Это действие доступно только второму игроку и только для его первого действия.

Второй игрок может вывести либо слово "STEAL", либо целое число -2 для этого действия.
*/

const STEAL = "STEAL"

func main() {
	// myId: Наш id (может быть 0 или 1) (Игрок с id 0 ходит первым)
	// oppId: Id противника
	// Если наш id 0, то id противника будет 1 и наоборот
	var myId, oppId int

	// Считываем переменные
	fmt.Scan(&myId, &oppId)

	for {
		// turnIndex: Индекс раунда (начинается с 0)
		// По ходу игры первый игрок получает [0,2,4,...], а второй игрок получает [1,3,5,...]
		var turnIndex int
		fmt.Scan(&turnIndex)

		for i := 0; i < 7; i++ {
			// boardRow: один ряд доски (сверху вниз)
			var boardRow string
			fmt.Scan(&boardRow)
		}
		// numValidActions: количество незаполненных столбцов на доске
		var numValidActions int
		fmt.Scan(&numValidActions)

		for i := 0; i < numValidActions; i++ {
			// action: допустимый индекс столбца, в который можно поместить фишку
			var action int
			fmt.Scan(&action)
		}
		// oppPreviousAction: предыдущий выбранный индекс столбца противника
		// (будет равен -1 для первого игрока в первый ход)
		var oppPreviousAction int
		fmt.Scan(&oppPreviousAction)

		// fmt.Fprintln(os.Stderr, "Debug messages...")

		// Выведите индекс столбца, чтобы поместить туда чип.
		// Добавьте сообщение (после пробела) для отображения в средстве просмотра.
		//fmt.Println("0")
		//fmt.Println("0 debug text message")
		//fmt.Println(STEAL)
	}
}
